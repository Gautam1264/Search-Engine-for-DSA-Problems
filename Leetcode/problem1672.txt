b'A parentheses string is a non-empty string consisting only of \'(\' and \')\'. It is valid if any of the following conditions is true:\n\nIt is ().\nIt can be written as AB (A concatenated with B), where A and B are valid parentheses strings.\nIt can be written as (A), where A is a valid parentheses string.\n\nYou are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of \'0\'s and \'1\'s. For each index i of locked,\n\nIf locked[i] is \'1\', you cannot change s[i].\nBut if locked[i] is \'0\', you can change s[i] to either \'(\' or \')\'.\n\nReturn true if you can make s a valid parentheses string. Otherwise, return false.\n\xc2\xa0\nExample 1:\n\nInput: s = "))()))", locked = "010100"\nOutput: true\nExplanation: locked[1] == \'1\' and locked[3] == \'1\', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to \'(\' while leaving s[2] and s[5] unchanged to make s valid.\nExample 2:\nInput: s = "()()", locked = "0000"\nOutput: true\nExplanation: We do not need to make any changes because s is already valid.\n\nExample 3:\nInput: s = ")", locked = "0"\nOutput: false\nExplanation: locked permits us to change s[0]. \nChanging s[0] to either \'(\' or \')\' will not make s valid.\n\n\xc2\xa0\nConstraints:\n\nn == s.length == locked.length\n1 <= n <= 105\ns[i] is either \'(\' or \')\'.\nlocked[i] is either \'0\' or \'1\'.\n\n'