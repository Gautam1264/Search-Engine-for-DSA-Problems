b'A string is a valid parentheses string (denoted VPS) if it meets one of the following:\n\nIt is an empty string "", or a single character not equal to "(" or ")",\nIt can be written as AB (A concatenated with B), where A and B are VPS\'s, or\nIt can be written as (A), where A is a VPS.\n\nWe can similarly define the nesting depth depth(S) of any VPS S as follows:\n\ndepth("") = 0\ndepth(C) = 0, where C is a string with a single character not equal to "(" or ")".\ndepth(A + B) = max(depth(A), depth(B)), where A and B are VPS\'s.\ndepth("(" + A + ")") = 1 + depth(A), where A is a VPS.\n\nFor example, "", "()()", and "()(()())" are VPS\'s (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS\'s.\nGiven a VPS represented as string s, return the nesting depth of s.\n\xc2\xa0\nExample 1:\nInput: s = "(1+(2*3)+((8)/4))+1"\nOutput: 3\nExplanation: Digit 8 is inside of 3 nested parentheses in the string.\n\nExample 2:\nInput: s = "(1)+((2))+(((3)))"\nOutput: 3\n\n\xc2\xa0\nConstraints:\n\n1 <= s.length <= 100\ns consists of digits 0-9 and characters \'+\', \'-\', \'*\', \'/\', \'(\', and \')\'.\nIt is guaranteed that parentheses expression s is a VPS.\n\n'