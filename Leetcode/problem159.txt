b'Given two version numbers,\xc2\xa0version1 and version2, compare them.\n\n\nVersion numbers consist of one or more revisions joined by a dot\xc2\xa0\'.\'. Each revision\xc2\xa0consists of digits\xc2\xa0and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\xc2\xa02.5.33\xc2\xa0and\xc2\xa00.1\xc2\xa0are valid version numbers.\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\xc2\xa0integer value ignoring any leading zeros. This means that revisions\xc2\xa01\xc2\xa0and\xc2\xa0001\xc2\xa0are considered\xc2\xa0equal. If a version number does not specify a revision at an index, then\xc2\xa0treat the revision as\xc2\xa00. For example, version\xc2\xa01.0 is less than version\xc2\xa01.1\xc2\xa0because their revision 0s are the same, but their revision 1s are\xc2\xa00\xc2\xa0and\xc2\xa01\xc2\xa0respectively, and\xc2\xa00 < 1.\nReturn the following:\n\nIf version1 < version2, return -1.\nIf version1 > version2, return 1.\nOtherwise, return 0.\n\n\xc2\xa0\nExample 1:\nInput: version1 = "1.01", version2 = "1.001"\nOutput: 0\nExplanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".\n\nExample 2:\nInput: version1 = "1.0", version2 = "1.0.0"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as "0".\n\nExample 3:\nInput: version1 = "0.1", version2 = "1.1"\nOutput: -1\nExplanation: version1\'s revision 0 is "0", while version2\'s revision 0 is "1". 0 < 1, so version1 < version2.\n\n\xc2\xa0\nConstraints:\n\n1 <= version1.length, version2.length <= 500\nversion1 and version2\xc2\xa0only contain digits and \'.\'.\nversion1 and version2\xc2\xa0are valid version numbers.\nAll the given revisions in\xc2\xa0version1 and version2\xc2\xa0can be stored in\xc2\xa0a\xc2\xa032-bit integer.\n\n'