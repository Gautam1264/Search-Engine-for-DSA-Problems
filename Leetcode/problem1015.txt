b'Design the CombinationIterator class:\n\nCombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.\nnext() Returns the next combination of length combinationLength in lexicographical order.\nhasNext() Returns true if and only if there exists a next combination.\n\n\xc2\xa0\nExample 1:\nInput\n["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]\n[["abc", 2], [], [], [], [], [], []]\nOutput\n[null, "ab", true, "ac", true, "bc", false]\n\nExplanation\nCombinationIterator itr = new CombinationIterator("abc", 2);\nitr.next();    // return "ab"\nitr.hasNext(); // return True\nitr.next();    // return "ac"\nitr.hasNext(); // return True\nitr.next();    // return "bc"\nitr.hasNext(); // return False\n\n\xc2\xa0\nConstraints:\n\n1 <= combinationLength <= characters.length <= 15\nAll the characters of characters are unique.\nAt most 104 calls will be made to next and hasNext.\nIt is guaranteed that all calls of the function next are valid.\n\n'