b'Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\n\nWordDictionary()\xc2\xa0Initializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word)\xc2\xa0Returns true if there is any string in the data structure that matches word\xc2\xa0or false otherwise. word may contain dots \'.\' where dots can be matched with any letter.\n\n\xc2\xa0\nExample:\nInput\n["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord("bad");\nwordDictionary.addWord("dad");\nwordDictionary.addWord("mad");\nwordDictionary.search("pad"); // return False\nwordDictionary.search("bad"); // return True\nwordDictionary.search(".ad"); // return True\nwordDictionary.search("b.."); // return True\n\n\xc2\xa0\nConstraints:\n\n1 <= word.length <= 25\nword in addWord consists of lowercase English letters.\nword in search consist of \'.\' or lowercase English letters.\nThere will be at most 3 dots in word for search queries.\nAt most 104 calls will be made to addWord and search.\n\n'