b'Design a data structure that efficiently finds the majority element of a given subarray.\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\nImplementing the MajorityChecker class:\n\nMajorityChecker(int[] arr) Initializes the instance of the class with the given array arr.\nint query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.\n\n\xc2\xa0\nExample 1:\nInput\n["MajorityChecker", "query", "query", "query"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\nOutput\n[null, 1, -1, 2]\n\nExplanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n\n\xc2\xa0\nConstraints:\n\n1 <= arr.length <= 2 * 104\n1 <= arr[i] <= 2 * 104\n0 <= left <= right < arr.length\nthreshold <= right - left + 1\n2 * threshold > right - left + 1\nAt most 104 calls will be made to query.\n\n'