b'There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your\xc2\xa0friends, level 2 of videos are all watched videos by the friends of your\xc2\xa0friends and so on. In general, the level k of videos are all\xc2\xa0watched videos by people\xc2\xa0with the shortest path exactly equal\xc2\xa0to\xc2\xa0k with you. Given your\xc2\xa0id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\xc2\xa0\n\xc2\xa0\nExample 1:\n\nInput: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\nOutput: ["B","C"] \nExplanation: \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = ["C"]\xc2\xa0\nPerson with id = 2 -> watchedVideos = ["B","C"]\xc2\xa0\nThe frequencies of watchedVideos by your friends are:\xc2\xa0\nB -> 1\xc2\xa0\nC -> 2\n\nExample 2:\n\nInput: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\nOutput: ["D"]\nExplanation: \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).\n\n\xc2\xa0\nConstraints:\n\nn == watchedVideos.length ==\xc2\xa0friends.length\n2 <= n\xc2\xa0<= 100\n1 <=\xc2\xa0watchedVideos[i].length <= 100\n1 <=\xc2\xa0watchedVideos[i][j].length <= 8\n0 <= friends[i].length < n\n0 <= friends[i][j]\xc2\xa0< n\n0 <= id < n\n1 <= level < n\nif\xc2\xa0friends[i] contains j, then friends[j] contains i\n\n'