b'Run-length encoding is a string compression method that works by\xc2\xa0replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string\xc2\xa0"aabccc"\xc2\xa0we replace "aa"\xc2\xa0by\xc2\xa0"a2"\xc2\xa0and replace "ccc"\xc2\xa0by\xc2\xa0"c3". Thus the compressed string becomes "a2bc3".\nNotice that in this problem, we are not adding\xc2\xa0\'1\'\xc2\xa0after single characters.\nGiven a\xc2\xa0string s\xc2\xa0and an integer k. You need to delete at most\xc2\xa0k characters from\xc2\xa0s\xc2\xa0such that the run-length encoded version of s\xc2\xa0has minimum length.\nFind the minimum length of the run-length encoded\xc2\xa0version of s after deleting at most k characters.\n\xc2\xa0\nExample 1:\nInput: s = "aaabcccd", k = 2\nOutput: 4\nExplanation: Compressing s without deleting anything will give us "a3bc3d" of length 6. Deleting any of the characters \'a\' or \'c\' would at most decrease the length of the compressed string to 5, for instance delete 2 \'a\' then we will have s = "abcccd" which compressed is abc3d. Therefore, the optimal way is to delete \'b\' and \'d\', then the compressed version of s will be "a3c3" of length 4.\nExample 2:\nInput: s = "aabbaa", k = 2\nOutput: 2\nExplanation: If we delete both \'b\' characters, the resulting compressed string would be "a4" of length 2.\n\nExample 3:\nInput: s = "aaaaaaaaaaa", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is "a11" of length 3.\n\n\xc2\xa0\nConstraints:\n\n1 <= s.length <= 100\n0 <= k <= s.length\ns contains only lowercase English letters.\n\n'