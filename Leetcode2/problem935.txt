b'Implement a SnapshotArray that supports the following interface:\n\nSnapshotArray(int length) initializes an array-like data structure with the given length.\xc2\xa0 Initially, each element equals 0.\nvoid set(index, val) sets the element at the given index to be equal to val.\nint snap()\xc2\xa0takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.\nint get(index, snap_id)\xc2\xa0returns the value at the given index, at the time we took the snapshot with the given snap_id\n\n\xc2\xa0\nExample 1:\nInput: ["SnapshotArray","set","snap","set","get"]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation: \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5\n\xc2\xa0\nConstraints:\n\n1 <= length\xc2\xa0<= 50000\nAt most 50000\xc2\xa0calls will be made to set, snap, and get.\n0 <= index\xc2\xa0<\xc2\xa0length\n0 <=\xc2\xa0snap_id <\xc2\xa0(the total number of times we call snap())\n0 <=\xc2\xa0val <= 10^9\n\n'