b'A string is a valid parentheses string\xc2\xa0(denoted VPS) if and only if it consists of "(" and ")" characters only, and:\n\nIt is the empty string, or\nIt can be written as\xc2\xa0AB\xc2\xa0(A\xc2\xa0concatenated with\xc2\xa0B), where\xc2\xa0A\xc2\xa0and\xc2\xa0B\xc2\xa0are VPS\'s, or\nIt can be written as\xc2\xa0(A), where\xc2\xa0A\xc2\xa0is a VPS.\n\nWe can\xc2\xa0similarly define the nesting depth depth(S) of any VPS S as follows:\n\ndepth("") = 0\ndepth(A + B) = max(depth(A), depth(B)), where A and B are VPS\'s\ndepth("(" + A + ")") = 1 + depth(A), where A is a VPS.\n\nFor example,\xc2\xa0 "",\xc2\xa0"()()", and\xc2\xa0"()(()())"\xc2\xa0are VPS\'s (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS\'s.\n\xc2\xa0\nGiven a VPS seq, split it into two disjoint subsequences A and B, such that\xc2\xa0A and B are VPS\'s (and\xc2\xa0A.length + B.length = seq.length).\nNow choose any such A and B such that\xc2\xa0max(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.length) that encodes such a\xc2\xa0choice of A and B:\xc2\xa0 answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.\xc2\xa0 Note that even though multiple answers may exist, you may return any of them.\n\xc2\xa0\nExample 1:\nInput: seq = "(()())"\nOutput: [0,1,1,1,1,0]\n\nExample 2:\nInput: seq = "()(())()"\nOutput: [0,0,0,1,1,0,1,1]\n\n\xc2\xa0\nConstraints:\n\n1 <= seq.size <= 10000\n\n'