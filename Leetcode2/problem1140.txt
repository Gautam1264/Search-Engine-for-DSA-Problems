b'Given two strings: s1 and s2 with the same\xc2\xa0size, check if some\xc2\xa0permutation of string s1 can break\xc2\xa0some\xc2\xa0permutation of string s2 or vice-versa. In other words s2 can break s1\xc2\xa0or vice-versa.\nA string x\xc2\xa0can break\xc2\xa0string y\xc2\xa0(both of size n) if x[i] >= y[i]\xc2\xa0(in alphabetical order)\xc2\xa0for all i\xc2\xa0between 0 and n-1.\n\xc2\xa0\nExample 1:\nInput: s1 = "abc", s2 = "xya"\nOutput: true\nExplanation: "ayx" is a permutation of s2="xya" which can break to string "abc" which is a permutation of s1="abc".\n\nExample 2:\nInput: s1 = "abe", s2 = "acd"\nOutput: false \nExplanation: All permutations for s1="abe" are: "abe", "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd" are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n\nExample 3:\nInput: s1 = "leetcodee", s2 = "interview"\nOutput: true\n\n\xc2\xa0\nConstraints:\n\ns1.length == n\ns2.length == n\n1 <= n <= 10^5\nAll strings consist of lowercase English letters.\n\n'