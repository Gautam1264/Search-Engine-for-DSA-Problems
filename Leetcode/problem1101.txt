b'\nA cinema\xc2\xa0has n\xc2\xa0rows of seats, numbered from 1 to n\xc2\xa0and there are ten\xc2\xa0seats in each row, labelled from 1\xc2\xa0to 10\xc2\xa0as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8]\xc2\xa0means the seat located in row 3 and labelled with 8\xc2\xa0is already reserved.\nReturn the maximum number of four-person groups\xc2\xa0you can assign on the cinema\xc2\xa0seats. A four-person group\xc2\xa0occupies four\xc2\xa0adjacent seats in one single row. Seats across an aisle (such as [3,3]\xc2\xa0and [3,4]) are not considered to be adjacent, but there is an exceptional case\xc2\xa0on which an aisle split\xc2\xa0a four-person group, in that case, the aisle split\xc2\xa0a four-person group in the middle,\xc2\xa0which means to have two people on each side.\n\xc2\xa0\nExample 1:\n\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n\nExample 2:\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\nExample 3:\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4\n\n\xc2\xa0\nConstraints:\n\n1 <= n <= 10^9\n1 <=\xc2\xa0reservedSeats.length <= min(10*n, 10^4)\nreservedSeats[i].length == 2\n1\xc2\xa0<=\xc2\xa0reservedSeats[i][0] <= n\n1 <=\xc2\xa0reservedSeats[i][1] <= 10\nAll reservedSeats[i] are distinct.\n\n'