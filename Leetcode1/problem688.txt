b"Let's call an array arr a mountain\xc2\xa0if the following properties hold:\n\narr.length >= 3\nThere exists some i with\xc2\xa00 < i\xc2\xa0< arr.length - 1\xc2\xa0such that:\n\t\narr[0] < arr[1] < ... arr[i-1] < arr[i] \narr[i] > arr[i+1] > ... > arr[arr.length - 1]\n\n\n\nGiven an integer array arr that is guaranteed to be\xc2\xa0a mountain, return any\xc2\xa0i\xc2\xa0such that\xc2\xa0arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].\n\xc2\xa0\nExample 1:\nInput: arr = [0,1,0]\nOutput: 1\n\nExample 2:\nInput: arr = [0,2,1,0]\nOutput: 1\n\nExample 3:\nInput: arr = [0,10,5,2]\nOutput: 1\n\n\xc2\xa0\nConstraints:\n\n3 <= arr.length <= 104\n0 <= arr[i] <= 106\narr is guaranteed to be a mountain array.\n\n\xc2\xa0\nFollow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?"