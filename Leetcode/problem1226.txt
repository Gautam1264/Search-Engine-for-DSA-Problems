b'Given a parentheses string s containing only the characters \'(\' and \')\'. A parentheses string is balanced if:\n\nAny left parenthesis \'(\' must have a corresponding two consecutive right parenthesis \'))\'.\nLeft parenthesis \'(\' must go before the corresponding two consecutive right parenthesis \'))\'.\n\nIn other words, we treat \'(\' as an opening parenthesis and \'))\' as a closing parenthesis.\n\nFor example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced.\n\nYou can insert the characters \'(\' and \')\' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.\n\xc2\xa0\nExample 1:\nInput: s = "(()))"\nOutput: 1\nExplanation: The second \'(\' has two matching \'))\', but the first \'(\' has only \')\' matching. We need to add one more \')\' at the end of the string to be "(())))" which is balanced.\n\nExample 2:\nInput: s = "())"\nOutput: 0\nExplanation: The string is already balanced.\n\nExample 3:\nInput: s = "))())("\nOutput: 3\nExplanation: Add \'(\' to match the first \'))\', Add \'))\' to match the last \'(\'.\n\n\xc2\xa0\nConstraints:\n\n1 <= s.length <= 105\ns consists of \'(\' and \')\' only.\n\n'