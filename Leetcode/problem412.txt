b"Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\xc2\xa0\nExample 1:\n\nInput: root = [1,null,2,2]\nOutput: [2]\n\nExample 2:\nInput: root = [0]\nOutput: [0]\n\n\xc2\xa0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\n\n\xc2\xa0\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."