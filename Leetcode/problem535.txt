b'Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the\xc2\xa0MagicDictionary\xc2\xa0class:\n\nMagicDictionary()\xc2\xa0Initializes the object.\nvoid buildDict(String[]\xc2\xa0dictionary)\xc2\xa0Sets the data structure\xc2\xa0with an array of distinct strings dictionary.\nbool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\n\n\xc2\xa0\nExample 1:\nInput\n["MagicDictionary", "buildDict", "search", "search", "search", "search"]\n[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict(["hello", "leetcode"]);\nmagicDictionary.search("hello"); // return False\nmagicDictionary.search("hhllo"); // We can change the second \'h\' to \'e\' to match "hello" so we return True\nmagicDictionary.search("hell"); // return False\nmagicDictionary.search("leetcoded"); // return False\n\n\xc2\xa0\nConstraints:\n\n1 <=\xc2\xa0dictionary.length <= 100\n1 <=\xc2\xa0dictionary[i].length <= 100\ndictionary[i] consists of only lower-case English letters.\nAll the strings in\xc2\xa0dictionary\xc2\xa0are distinct.\n1 <=\xc2\xa0searchWord.length <= 100\nsearchWord\xc2\xa0consists of only lower-case English letters.\nbuildDict\xc2\xa0will be called only once before search.\nAt most 100 calls will be made to search.\n\n'