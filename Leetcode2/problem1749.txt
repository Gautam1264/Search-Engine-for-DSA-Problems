b'You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.\nThe ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i].\nReturn an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.\n\xc2\xa0\nExample 1:\nInput: s = "babacc", queryCharacters = "bcb", queryIndices = [1,3,3]\nOutput: [3,3,4]\nExplanation: \n- 1st query updates s = "bbbacc". The longest substring consisting of one repeating character is "bbb" with length 3.\n- 2nd query updates s = "bbbccc". \n  The longest substring consisting of one repeating character can be "bbb" or "ccc" with length 3.\n- 3rd query updates s = "bbbbcc". The longest substring consisting of one repeating character is "bbbb" with length 4.\nThus, we return [3,3,4].\n\nExample 2:\nInput: s = "abyzz", queryCharacters = "aa", queryIndices = [2,1]\nOutput: [2,3]\nExplanation:\n- 1st query updates s = "abazz". The longest substring consisting of one repeating character is "zz" with length 2.\n- 2nd query updates s = "aaazz". The longest substring consisting of one repeating character is "aaa" with length 3.\nThus, we return [2,3].\n\n\xc2\xa0\nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\nk == queryCharacters.length == queryIndices.length\n1 <= k <= 105\nqueryCharacters consists of lowercase English letters.\n0 <= queryIndices[i] < s.length\n\n'