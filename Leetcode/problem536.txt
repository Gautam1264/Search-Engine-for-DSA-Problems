b'Design a map that allows you to do the following:\n\nMaps a string key to a given value.\nReturns the sum of the values that have a key with a prefix equal to a given string.\n\nImplement the MapSum class:\n\nMapSum() Initializes the MapSum object.\nvoid insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\nint sum(string prefix) Returns the sum of all the pairs\' value whose key starts with the prefix.\n\n\xc2\xa0\nExample 1:\nInput\n["MapSum", "insert", "sum", "insert", "sum"]\n[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]\nOutput\n[null, null, 3, null, 5]\n\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert("apple", 3);  \nmapSum.sum("ap");           // return 3 (apple = 3)\nmapSum.insert("app", 2);    \nmapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)\n\n\xc2\xa0\nConstraints:\n\n1 <= key.length, prefix.length <= 50\nkey and prefix consist of only lowercase English letters.\n1 <= val <= 1000\nAt most 50 calls will be made to insert and sum.\n\n'