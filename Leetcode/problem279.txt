b'One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node\'s value. If it is a null node, we record using a sentinel value such as \'#\'.\n\nFor example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where \'#\' represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character \'#\' representing null pointer.\nYou may assume that the input format is always valid.\n\nFor example, it could never contain two consecutive commas, such as "1,,3".\n\nNote:\xc2\xa0You are not allowed to reconstruct the tree.\n\xc2\xa0\nExample 1:\nInput: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"\nOutput: true\nExample 2:\nInput: preorder = "1,#"\nOutput: false\nExample 3:\nInput: preorder = "9,#,#,1"\nOutput: false\n\n\xc2\xa0\nConstraints:\n\n1 <= preorder.length <= 104\npreorder consist of integers in the range [0, 100] and \'#\' separated by commas \',\'.\n\n'